import '../../../xmlhttprequest-ssl/lib/XMLHttpRequest.js';
import XMLHttpRequest from '../../../../_virtual/XMLHttpRequest.js';
import './polling-xhr.js';
import './polling-jsonp.js';
import './websocket.js';
import XHR from '../../../../_virtual/polling-xhr.js';
import JSONP from '../../../../_virtual/polling-jsonp.js';
import websocket from '../../../../_virtual/websocket2.js';

/**
 * Module dependencies
 */






/**
 * Export transports.
 */

var polling_1 = polling;
var websocket_1 = websocket;

/**
 * Polling transport polymorphic constructor.
 * Decides on xhr vs jsonp based on feature detection.
 *
 * @api private
 */

function polling (opts) {
  var xhr;
  var xd = false;
  var xs = false;
  var jsonp = false !== opts.jsonp;

  if (typeof location !== 'undefined') {
    var isSSL = 'https:' === location.protocol;
    var port = location.port;

    // some user agents have empty `location.port`
    if (!port) {
      port = isSSL ? 443 : 80;
    }

    xd = opts.hostname !== location.hostname || port !== opts.port;
    xs = opts.secure !== isSSL;
  }

  opts.xdomain = xd;
  opts.xscheme = xs;
  xhr = new XMLHttpRequest(opts);

  if ('open' in xhr && !opts.forceJSONP) {
    return new XHR(opts);
  } else {
    if (!jsonp) throw new Error('JSONP disabled');
    return new JSONP(opts);
  }
}

var transports = {
	polling: polling_1,
	websocket: websocket_1
};

export { transports as __moduleExports, polling_1 as polling, websocket_1 as websocket };
