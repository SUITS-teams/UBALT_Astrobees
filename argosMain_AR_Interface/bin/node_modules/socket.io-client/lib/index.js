import { createCommonjsModule } from '../../../_virtual/_commonjsHelpers.js';
import '../node_modules/debug/src/index.js';
import require$$0 from '../../../_virtual/index4.js';
import './url.js';
import '../node_modules/socket.io-parser/index.js';
import parser from '../../../_virtual/index22.js';
import './socket.js';
import require$$1 from '../../../_virtual/socket2.js';
import './manager.js';
import url from '../../../_virtual/url.js';
import Manager from '../../../_virtual/manager.js';

var lib = createCommonjsModule(function (module, exports) {
/**
 * Module dependencies.
 */




var debug = require$$0('socket.io-client');

/**
 * Module exports.
 */

module.exports = exports = lookup;

/**
 * Managers cache.
 */

var cache = exports.managers = {};

/**
 * Looks up an existing `Manager` for multiplexing.
 * If the user summons:
 *
 *   `io('http://localhost/a');`
 *   `io('http://localhost/b');`
 *
 * We reuse the existing instance based on same scheme/port/host,
 * and we initialize sockets for each namespace.
 *
 * @api public
 */

function lookup (uri, opts) {
  if (typeof uri === 'object') {
    opts = uri;
    uri = undefined;
  }

  opts = opts || {};

  var parsed = url(uri);
  var source = parsed.source;
  var id = parsed.id;
  var path = parsed.path;
  var sameNamespace = cache[id] && path in cache[id].nsps;
  var newConnection = opts.forceNew || opts['force new connection'] ||
                      false === opts.multiplex || sameNamespace;

  var io;

  if (newConnection) {
    debug('ignoring socket cache for %s', source);
    io = Manager(source, opts);
  } else {
    if (!cache[id]) {
      debug('new io instance for %s', source);
      cache[id] = Manager(source, opts);
    }
    io = cache[id];
  }
  if (parsed.query && !opts.query) {
    opts.query = parsed.query;
  }
  return io.socket(parsed.path, opts);
}

/**
 * Protocol version.
 *
 * @api public
 */

exports.protocol = parser.protocol;

/**
 * `connect`.
 *
 * @param {String} uri
 * @api public
 */

exports.connect = lookup;

/**
 * Expose constructors for standalone build.
 *
 * @api public
 */

exports.Manager = Manager;
exports.Socket = require$$1;
});
var lib_1 = lib.managers;
var lib_2 = lib.protocol;
var lib_3 = lib.connect;
var lib_4 = lib.Manager;
var lib_5 = lib.Socket;

export default lib;
export { lib_4 as Manager, lib_5 as Socket, lib as __moduleExports, lib_3 as connect, lib_1 as managers, lib_2 as protocol };
