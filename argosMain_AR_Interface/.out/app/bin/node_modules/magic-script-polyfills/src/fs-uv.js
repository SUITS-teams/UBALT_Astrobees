import { fs, Fs } from 'uv';

function openSync(path, flags, mode) {
    return fs.open(new Fs(), path, flags, mode);
}
function closeSync(fd) {
    fs.close(new Fs(), fd);
}
function readSync(fd, data, position) {
    const safeData = workaroundPrep(data);
    const bytesRead = fs.read(new Fs(), fd, safeData, position);
    workaroundSet(data, safeData);
    return bytesRead;
}
function writeSync(fd, data, position) {
    const safeData = workaroundPrep(data);
    return fs.write(new Fs(), fd, safeData, position);
}
function mkdirSync(path, mode) {
    fs.mkdir(new Fs(), path, mode);
}
/**
 * Workaround a bug in libuv bindings in Lumin OS 0.98.0.
 * This ensures that the backing array buffer is not larger than the view.
 */
function workaroundPrep(data) {
    return data;
    // return data.byteOffset === 0 && data.byteLength === data.buffer.byteLength
    //     ? data : data.slice();
}
/**
 * Workaround a bug in libuv bindings in Lumin OS 0.98.0.
 * This ensures that data read into safeData is also set in data.
 */
function workaroundSet(data, safeData) {
    if (data !== safeData) {
        data.set(safeData);
    }
}

export { closeSync, mkdirSync, openSync, readSync, workaroundPrep, workaroundSet, writeSync };
