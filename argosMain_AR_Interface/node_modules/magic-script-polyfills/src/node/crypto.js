import { getRandomValues } from "../crypto.js";
import { close, open, read } from "../fs-promised.js";
export function createHash() {
    throw new Error("TODO: Implement crypto.createHash for node");
}
export function randomBytes(size, callback) {
    const buffer = new Uint8Array(size);
    if (callback) {
        randomBytesCallback(buffer, callback);
    }
    else {
        return getRandomValues(buffer);
    }
}
function randomBytesCallback(buffer, callback) {
    randomBytesPromised(buffer).then((data) => callback(null, data), (err) => callback(err));
}
async function randomBytesPromised(buffer) {
    const fd = await open("/dev/urandom", "r", 0o400);
    try {
        await read(fd, buffer, 0);
    }
    finally {
        await close(fd);
    }
    return buffer;
}
export function randomFillSync(buffer, rawOffset, rawSize) {
    getRandomValues(normalizeOffsetBuffer(buffer, rawOffset, rawSize));
    return buffer;
}
export function randomFill(buffer, rawOffset, rawSize, rawCallback) {
    randomBytesCallback(normalizeOffsetBuffer(buffer, rawOffset, rawSize), (rawOffset || rawSize || rawCallback));
}
function normalizeOffsetBuffer(buffer, rawOffset, rawSize) {
    const offset = typeof rawOffset === "number" ? rawOffset : 0;
    const size = typeof rawSize === "number" ? rawSize : buffer.length - offset;
    return (offset === 0 && size === buffer.length)
        ? buffer : buffer.subarray(offset, offset + size);
}
